#!/usr/bin/env python

# Guiding script.
# (C) 2017 Petr Kubanek
#

import rts2.rtsapi
import rts2.brights

import sys
import argparse
import gettext
import numpy
gettext.install('rts2-guide')

parser = argparse.ArgumentParser(description=_('Command line guiding'))

parser.add_argument('--server', help=_('URL to RTS2 XML-RPC server'), action='store', dest='server', default='http://localhost:8889')
parser.add_argument('--user', help=_('RTS2 web server username'), action='store', dest='user', default=None)
parser.add_argument('--password', help=_('password for web user'), action='store', dest='password', default=None)
parser.add_argument('-v', help=_('increases verbosity'), action='count', dest='verbose', default=0)
parser.add_argument('--ds9', help=_('use DS9 to display images'), action='store_true', dest='useDS9', default=False)
parser.add_argument('--camera', help=_('guide camera'), action='store', dest='ccd', default='AG1CCD')
parser.add_argument('--rotator', help=('guiding camera rotator'), action='store', dest='rotator', default='DER1')
parser.add_argument('--min-flux', help=('minimal guiding star flux'), action='store', dest='min_flux', default=3000)
parser.add_argument('--pixelscale', help=('camera pixels scale (arcsec/pixel)'), action='store', dest='pixscale', default=0.21, type=float)
parser.add_argument('--sensibility', help=('guiding sensibility [arcsec]'), action='store', dest='sensibility', default=0.1, type=float)
parser.add_argument('--agressivity', help=('guiding agressivity'), action='store', dest='agressivity', default=0.7, type=float)
parser.add_argument('--not-guide', help=('only record changes, do not guide'), action='store_true', dest='not_guide', default=False)

options = parser.parse_args()

j = rts2.rtsapi.JSONProxy(options.server, options.user, options.password, verbose=options.verbose > 2)

tn = j.getDevicesByType(rts2.rtsapi.DEVICE_TYPE_MOUNT)
if tn is None:
	sys.exit(_('Telescope not connected?'))

tn = tn[0]

# first, found a star
def find_star(ccd):
	j.setValue(ccd, 'center_box', '-1 -1 -1 -1')
	j.setValue(ccd, 'WINDOW', '-1 -1 -1 -1')
	j.setValue(ccd, 'exposure', 3)
	data = numpy.array(j.takeImage(ccd), dtype=numpy.int32)

	if options.useDS9:
		import ds9
		d = ds9.ds9('Guiding')
		d.set('frame 0')
		d.set_np2arr(data)

	x,y,flux,ratio = rts2.brights.find_brightest_on_data(data, options.verbose, exclusion=30, pix_treshold=25)
	print _('Found star: {0} {1} {2:.1}').format(x, y, flux)
	if x is None or flux < options.min_flux:
		sys.exit(_('No suitable guiding star'))

	j.setValue(ccd, 'WINDOW', '{0} {1} {2} {3}'.format(x - 20, y - 20, 40, 40))

def guide_loop(ccd):
	j.setValue(ccd, 'center_cal', 1)
	while True:
		pa = 0
		if options.rotator:
			j.executeCommand(options.rotator, 'info')
			pa = float(j.getValue(options.rotator, 'PA'))

		data = j.takeImage(ccd)
		if options.useDS9:
			import ds9
			d = ds9.ds9('Guiding')
			d.set('frame 0')
			d.set_np2arr(data)

		j.refresh()
		c_x = float(j.getValue(ccd, 'center_X'))
		c_y = float(j.getValue(ccd, 'center_Y'))

		c_max = float(j.getValue(ccd, 'center_max'))

		if c_x == 0 or c_y == 0:
			print 'lost guide star?'
			return

		x_dev = (c_x - 20) * options.pixscale
		y_dev = (c_y - 20) * options.pixscale
		print 'center {0:.3} {1:.3} deviations {2:.2} {3:.2} flux {4}'.format(c_x, c_y, x_dev, y_dev, c_max)
		ra = 0
		dec = 0

		pa_r = numpy.radians(pa)

		pa_sin = numpy.sin(pa_r)
		pa_cos = numpy.cos(pa_r)

		if abs(x_dev) > options.sensibility or abs(y_dev) > options.sensibility:
			ra = (pa_cos * y_dev - pa_sin * x_dev) * options.agressivity
			dec = (-1 * pa_cos * x_dev - pa_sin * y_dev) * options.agressivity
			if options.not_guide:
				print _('would send offset {0:.2}" {1:.2}" to {2}, PA: {3}').format(ra, dec, tn, pa)
			else:
				print _('sending offset {0:.2}" {1:.2}" to {2}, PA: {3}').format(ra, dec, tn, pa)
				j.incValue(tn, 'GOFFS', '{0} {1}'.format(ra / 3600.0, dec / 3600.0))

while True:
	find_star(options.ccd)

	guide_loop(options.ccd)
